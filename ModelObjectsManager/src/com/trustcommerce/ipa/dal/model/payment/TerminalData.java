package com.trustcommerce.ipa.dal.model.payment;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.trustcommerce.ipa.dal.constants.global.GlobalConstants;
import com.trustcommerce.ipa.dal.model.exceptions.BadDataException;
import com.trustcommerce.ipa.dal.model.exceptions.CardExpiredException;

import org.codehaus.jackson.annotate.JsonProperty;

public abstract class TerminalData extends TrackData {

	private static final transient Logger LOGGER = LoggerFactory.getLogger(TerminalData.class);
	// private static final String REGEX = "^[a-zA-Z0-9]+$";

	/** This is a String generated by the MSR when transactions are manual. */
	private static final String MANUALLY_ENTERED = "ENTERED MANUALLY";

	/** EntryModeTypeID 1=Swiped 2=EMV Chip Read 3=Keyed. */
	protected int entryModeTypeID;
	/** The name that appears on the credit card. */
	protected String customerName;
	/** True if it is a debit card. */
	protected boolean debitCard;

	/** MMYY 0115. Can be stored to DB (PCI). */
	protected String ccExpirationDate;
	/**
	 * Used to transport first 6 and last 4 as a pan only. CC is not stored in
	 * DB (PCI).
	 */
	protected String creditCardNumber;

	/** Debit Encrypted pinBlock. obtained from the IngenicoPINPad . */
	private String encryptedPIN;
	/**
	 * Debit Additional Security Information obtained from the IngenicoPINPad .
	 */
	private String ksn;

	/**
	 * TCLINK data: If the error response field is included, the "offenders"
	 * response field will also be included. This will indicate the field or
	 * fields that are responsible for the error..
	 */
	protected boolean signatureCaptured;
	/** ARPC text. */
	protected String arpc;
	/** ARPC text. */
	protected String arqc;
	/** ARQC Properties. */
	protected Properties arqcProp;
	/** Data generated by the terminal when the transaction is complete. */
	protected String finalEmvData;

	/**
	 * Indicates what brand of card was used (i.e. Visa, Mastercard,
	 * AmericanExpress, Discover, DinersClub.
	 */
	private String cardBrand;
	/**
	 * This is the numeric or alphanumeric code received from the processor in
	 * response to a transaction. (TCLINK).
	 */
	protected String authorizationCode;
	
	protected String serialNumber;

	private String CVV;

	// Additional members not included in the Json response
	private String title;
	private String firstName;
	private String lastname;
	private String middlename;
	/** Property obtained from the MSR. */
	private String serviceCode;
	


	/** The serial number will be compare with the serial obtained during jDAL initialization.*/
	public TerminalData() {

	}

	/**
	 * Constructor use to submit an error code.
	 * 
	 * @param entryModeStatusID int
	 */
	public TerminalData(final int entryModeStatusID) {

	}

	/**
	 * Returns the customer first name plus last name. This data is not
	 * generated in EMV transactions.
	 * 
	 * @return String
	 */
	public final String getCustomerName() {
		if (entryModeTypeID == 1) {
			customerName = buildAccountName();
		}
		return customerName;
	}
	
	
	/**
	 * Only use in EMV Mode where the Card holder name resides in tag 5f20.
	 * @param val String
	 */
	@JsonProperty("CustomerName")
	public final void setCustomerName(final String val) {
		customerName = val;
	}

	/**
	 * Only use on the Manual Mode.
	 * 
	 * @param accountName String Contains the First Name(s) + Last Names(s)
	 */
	
	public final void setCardHolderName(final String accountName) {
		// This is the only input typed by user.
		if (accountName == null || accountName.trim().isEmpty()) {
			return;
		}
		customerName = accountName.trim();
	}

	/**
	 * Only use for swipe.
	 * 
	 * @param title
	 * @param name
	 * @param mi
	 * @param surname
	 * @return string
	 */
	public final String buildAccountName() {

		final StringBuilder sb = new StringBuilder();
		if (title != null && title.length() > 0) {
			sb.append(title);
		}

		if (firstName != null && firstName.length() > 0) {
			if (title != null) {
				sb.append(" " + firstName);
			} else {
				sb.append(firstName);
			}
		}
		if (middlename != null && middlename.length() > 0) {
			if (!sb.toString().isEmpty()) {
				sb.append(" " + middlename);
			} else {
				sb.append(middlename);
			}
		}

		if (lastname != null && lastname.length() > 0) {
			if (!sb.toString().isEmpty()) {
				sb.append(" " + lastname);
			} else {
				sb.append(lastname);
			}
		}
		String temp = sb.toString().trim();

		// Clutch here: On manual mode, the device returns "MANUALLY_ENTERED" as
		// a name
		if (temp.equalsIgnoreCase(MANUALLY_ENTERED)) {
			temp = "";
		}
		return temp;
	}


	/**
	 * 
	 * @return boolean
	 */
	public final boolean validateDebitCardInfo() {
		if (encryptedPIN == null || ksn == null) {
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 
	 * @return boolean
	 */
	public final boolean isDebitCard() {
		return debitCard;
	}

	/**
	 * 
	 * @param val
	 *            boolean
	 */
	@JsonProperty("DebitCard")
	public final void setDebitCard(final boolean val) {
		this.debitCard = val;
	}

	/**
	 * 
	 * @return String
	 */
	public final String getCcExpirationDate() {
		return ccExpirationDate;
	}
	
	/**
	 * 
	 * @param val String
	 */
	@JsonProperty("CCExpirationDate")
	public final void setCcExpirationDate(final String val) {
		// The MSR returns the Expiration Date, with the format YYMM.
		// We need to convert it to MMYY
		if (val != null & !val.isEmpty()) {
			final String year = val.substring(0, 2);
			final String month = val.substring(2, 4);
			ccExpirationDate = month + year;
		} else {
			ccExpirationDate = "";
		}
	}
	/**
	 * 
	 * @param year String
	 * @param month String
	 * @throws CardExpiredException
	 */
	private void compareDate(final String year, final String month) throws CardExpiredException {
		final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
		Date expDate = null;
		try {
			expDate = dateFormat.parse("20" + year + month + "01" + "30");
		} catch (ParseException e) {
			LOGGER.trace("This card has expired");
		}

		final Date today = new Date(System.currentTimeMillis());
		if (today.after(expDate)) {
			LOGGER.trace("This card has expired");
		}
	}
	/**
	 * 
	 * @return String
	 */
	public final String getCreditCardNumber() {
		return creditCardNumber;
	}

	/**
	 * 
	 * @param val String
	 */
	@JsonProperty("CreditCardNumber")
	public final void setCreditCardNumber(final String val) {
		creditCardNumber = val;
	}
    /**
     * 
     * @return String
     */
	public final String getFirstName() {
		return firstName;
	}
	/**
	 * 
	 * @param name String
	 */
	public final void setFirstName(final String name) {
		this.firstName = name;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getLastname() {
		return lastname;
	}
	/**
	 * 
	 * @param val String
	 */
	public final void setLastname(final String val) {
		this.lastname = val;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getMiddlename() {
		return middlename;
	}
	/**
	 * 
	 * @param val String
	 */
	public final void setMiddlename(final String val) {
		this.middlename = val;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getTitle() {
		return title;
	}
	/**
	 * 
	 * @param title String
	 */
	public final void setTitle(final String val) {
		this.title = val;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getServiceCode() {
		return serviceCode;
	}
	/**
	 * 
	 * @param serviceCode String
	 */
	public final void setServiceCode(final String serviceCode) {
		this.serviceCode = serviceCode;
	}

	/**
	 * Use to determine the way to look in the Vault for a card type.
	 * 
	 * @return boolean
	 */
	public boolean isEMVCard() {

		if (serviceCode == null) {
			return false;
		}
		// Non-EMV card gets to use the old debit lookup.
		if (serviceCode.startsWith("2") || serviceCode.startsWith("6")) {
			LOGGER.debug("Track service code indicates EMV card");
			return true;
		} else {
			return false;
		}
	}
	/**
	 * 
	 * @return int
	 */
	public final int getEntryModeTypeID() {
		return entryModeTypeID;
	}
	
	/**
	 * 
	 * @param val int
	 */
	@JsonProperty("EntryModeTypeID")
	public final void setEntryModeTypeID(final int val) {
		this.entryModeTypeID = val;
	}

	/**
	 * EncryptedPin contained the pinBlock + the KSN.
	 * 
	 * @return String with encryptedPIN + ksn
	 */
	public final String getPINBlock() {
		if (encryptedPIN == null || ksn == null) {
			// TODO problems ....
			return null;
		}
		return encryptedPIN + ksn; //
	}
	
	/**
	 * MSR data. This value is not in the payment object.
	 * @param ksn String
	 */
	public final void setKsn(final String ksn) {
		this.ksn = ksn;
	}


	/**
	 * MSR data.
	 * @param encryptedPIN String
	 */
	@JsonProperty("EncryptedPIN")
	public final void setEncryptedPIN(final String encryptedPIN) {
		this.encryptedPIN = encryptedPIN;
	}
	
	/**
	 * 
	 * @return boolean
	 */
	public final boolean isSignatureCaptured() {
		return signatureCaptured;
	}
	
	/**
	 * 
	 * @param signatureCaptured boolean
	 */
	@JsonProperty("SignatureCaptured")
	public final void setSignatureCaptured(final boolean signatureCaptured) {
		this.signatureCaptured = signatureCaptured;
	}
	
	/**
	 * 
	 * @return String
	 */
	public final String getArpc() {
		return arpc;
	}
	/**
	 * 
	 * @param arpc String
	 */
	@JsonProperty("EMVTagsAuthResponse")
	public final void setArpc(final String arpc) {
		this.arpc = arpc;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getCardBrand() {
		return cardBrand;
	}
	/**
	 * 
	 * @param cardBrand String
	 */
	@JsonProperty("CardBrand")
	public final void setCardBrand(final String cardBrand) {
		this.cardBrand = cardBrand;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getAuthorizationCode() {
		return authorizationCode;
	}
	/**
	 * 
	 * @param authorizationCode String
	 */
	@JsonProperty("AuthorizationCode")
	public final void setAuthorizationCode(final String authorizationCode) {
		this.authorizationCode = authorizationCode;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getArqc() {
		return arqc;
	}
	/**
	 * 
	 * @param arqc String
	 */
	@JsonProperty("EMVTagsAuth")
	public final void setArqc(final String arqc) {
		this.arqc = arqc;
	}
	/**
	 * 
	 * @param val String
	 */
	@JsonProperty("EMVTagsConfirm")
	public final void setFinalEmvData(final String val) {
		this.finalEmvData = val;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getFinalEmvData() {
		return finalEmvData;
	}

	/**
	 * 
	 * @return String
	 */
	public final String getCVV() {
		return CVV;
	}
	/**
	 * 
	 * @param cVV String
	 */
	@JsonProperty("CVV")
	public final void setCVV(final String cVV) {
		CVV = cVV;
	}
	
	public String getSerialNumber() {
		return serialNumber;
	}

	@JsonProperty("SerialNumber")
	public void setSerialNumber(String serialNumber) {
		this.serialNumber = serialNumber;
	}
	
	/**
	 * 
	 * @return String
	 */
	public final String cardInfoToString() {
		return "\"EntryModeTypeID\" : \"" + entryModeTypeID + "\"," 
				+ "\"CustomerName\" : \"" + getCustomerName() + "\"," 
				+ tracksToString() 
		        + "\"DebitCard\" : \"" + debitCard + "\"," 
		        + "\"EncryptedPIN\" : \"" + getPINBlock() + "\"," 
		        + "\"CreditCardNumber\" : \"" + creditCardNumber + "\","
		        + "\"SerialNumber\" : \"" + serialNumber + "\","
		        + "\"EMVTagsAuth\" : \"" + getArqcAsString() + "\"," 
		        + "\"EMVTagsAuthResponse\" : \"" + arpc + "\","
		        + "\"EMVTagsConfirm\" : \"" + finalEmvData + "\"," 
		        + "\"CCExpirationDate\" : \"" + ccExpirationDate
		        + "\"," + "\"CVV\" : \"" + CVV + "\",";
	}
	
	
	/**
	 * 
	 * @return Properties
	 */
	public final Properties getArqcProp() {
		return arqcProp;
	}
	/**
	 * 
	 * @param arqcProp Properties
	 */
	public final void setArqcProp(final Properties arqcProp) {
		this.arqcProp = arqcProp;
	}
	/**
	 * 
	 * @return String
	 */
	private String getArqcAsString() {
		if (arqcProp == null) {
			return "";
		}
		final Enumeration e = arqcProp.propertyNames();
		final StringBuilder sb = new StringBuilder();

		while (e.hasMoreElements()) {
			final String key = (String) e.nextElement();
			sb.append(key);
			sb.append("=");
			sb.append(arqcProp.getProperty(key));
			sb.append("&");
		}
		return sb.toString();
	}
	/**
	 * 
	 * @throws BadDataException
	 * @throws CardExpiredException
	 */
	public final void validateData() throws BadDataException, CardExpiredException {
		if (creditCardNumber == null || creditCardNumber.isEmpty()) {
			throw new BadDataException("The Credit Card Number is Missing in this card");
		}
		if (ccExpirationDate == null || ccExpirationDate.isEmpty()) {
			throw new BadDataException("The Expiration Date is Missing in this card");
		}
		final String month = ccExpirationDate.substring(0, 2);
		final String year = ccExpirationDate.substring(2, 4);
		ccExpirationDate = month + year;
		compareDate(year, month);
	}


	/**
	 * Getting creditcard number from the track2.
	 */
	public void setCreditCardNumberFromTrack2() {
		if (track2Data != null) {
			if (creditCardNumber == null || creditCardNumber.isEmpty()) {
				creditCardNumber = track2Data.split("D")[0];
			}
		}
	}


}
