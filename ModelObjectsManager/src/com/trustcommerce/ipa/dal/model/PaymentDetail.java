 package com.trustcommerce.ipa.dal.model;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.trustcommerce.ipa.dal.model.exceptions.BadDataException;
import com.trustcommerce.ipa.dal.model.exceptions.CardExpiredException;
import com.trustcommerce.ipa.dal.model.types.EntryModeTypeId;

public class PaymentDetail {

		/** log4j logger.*/
	
    private static final transient Logger LOGGER = LoggerFactory.getLogger(PaymentDetail.class);
	// private static final String REGEX = "^[a-zA-Z0-9]+$"; 
    /** */
	public final static String CARD_HOLDER_NAME_EXCEED_SIZE = "<html>Cardholders name must be less than <br /> or equals to 60 characters.</html>";

	public final static String CARD_HOLDER_NAME_INVALID_CHARACTERS = "<html>Cardholders name can only contain <br /> letters. Please re-enter.</html>";
	/**
	 * 
	 */
	private static final String REGEX = "^[a-zA-Z.' ]+$";
	/** This is a String generated by the MSR when transactions are manual. */
	private static final String MANUALLY_ENTERED = "ENTERED MANUALLY";
	
	/** EntryModeTypeID	1=Swiped 2=EMV Chip Read 3=Keyed. */
	private EntryModeTypeId entryModeTypeID;
	private String customerName;
	private String serialNumber;
	/** True if it is a debit card. */
	private boolean debitCard;
	
	private String track1Data;
	private String track2Data;
	// Track 3 in the actual encrypted track
	private String track3Data;
	private String encryptedTracks;
	// Device Error number
	/** transaction entry mode.*/
	private int entryModeStatusID;
	/** MMYY 0115. Can be stored to DB (PCI). */
	private String ccExpirationDate;
	/** Used to transport first 6 and last 4 as a pan only. CC is not stored in DB (PCI). */
	private String creditCardNumber;
	/** device firmware version. */
	private String firmwareVersion;
	
	// Additional members not included in the Json response
	private String title;
	private String firstName;
	private String lastname;
	private String middlename;
	
	// Debit pin info

	/** Encrypted pinBlock. obtained from the IngenicoPINPad . */
	private String encryptedPIN;
	/** Additional Security Information obtained from the IngenicoPINPad . */
	private String ksn;

	public PaymentDetail() {
		entryModeTypeID = EntryModeTypeId.Unknown;
	}
    /**
     * 
     * @param track1 String
     * @param track2 String
     * @param track3 String
     */
	public final void setTracks(final String track1, final String track2, final String track3) {
		this.track1Data = track1.trim();
		this.track2Data = track2.trim();
		// This is the encrypted data
		this.track3Data = track3.trim();
		encryptedTracks = track1Data + "|" + track2Data + "|" + track3Data;
	}
	
	/**
	 * 
	 * @return EntryModeTypeId
	 */
	public final EntryModeTypeId getEntryModeTypeId() {
		return entryModeTypeID;
	}
	/**
	 * 
	 * @param transType EntryModeTypeIds
	 */
	public final void setEntryModeTypeId(final EntryModeTypeId transType) {
		this.entryModeTypeID = transType;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getCustomerName() {
	    customerName = buildAccountName();
		return customerName;
	}

	
	/**
	 * Only use on the Manual Mode.
	 * @param accountName String
	 */
	public final void setCustomerName(final String accountName) {
		// This is the only input typed by user.
		if (accountName == null || accountName.trim().isEmpty()) {
			return;
		}
		final String[] temp = accountName.trim().split(" ");
		if (temp.length == 1) {
		    firstName = accountName;
		} else if (temp.length == 2) {
		    firstName = temp[0];
		    lastname = temp[1];
		} else {
            firstName = temp[0];
            lastname = temp[1];
		}
	}

	/**
	 * Encrypted track data not saved to DB(PCI).
	 * @return String
	 */
	public final String getTrack1Data() {
		if (track1Data == null) {
			return "";
		}
		return track1Data;
	}
	

	/**
	 * Encrypted track data not saved to DB(PCI).
	 * @return String
	 */
	public final String getTrack2Data() {
		if (track2Data == null) {
			return "";
		}
		return track2Data;
	}

	/**
	 * Encrypted track data not saved to DB(PCI).
	 * @return String
	 */
	public final String getTrack3Data() {
		if (track3Data == null) {
			return "";
		}
		return track3Data;
	}
	/**
	 * 
	 * @return String
	 */
	public final String getTerminalSerial() {
		return serialNumber;
	}
	/**
	 * 
	 * @param terminalSerial String
	 */
	public final void setTerminalSerial(final String terminalSerial) {
		this.serialNumber = terminalSerial;
	}

	
	/**
	 * The encrypted tracks (1, 2 and 3), bar delimited, that are not saved to DB (PCI).
	 * @return String
	 */
	public final String getEncryptedTracks() {
		return encryptedTracks;
	}

	
	/**
	 * Only use for swipe.
	 * @param title
	 * @param name
	 * @param mi
	 * @param surname
	 * @return String
	 */
	public final String buildAccountName() {

		final StringBuilder sb = new StringBuilder();
		if (title != null && title.length() > 0) {
			sb.append(title);
		}

		if (firstName != null && firstName.length() > 0) {
			if (title != null) {
				sb.append(" " + firstName);
			} else {
				sb.append(firstName);
			}
		}
		if (middlename != null && middlename.length() > 0) {
			if (!sb.toString().isEmpty()) {
				sb.append(" " + middlename);
			} else {
				sb.append(middlename);
			}
		}

		if (lastname != null && lastname.length() > 0) {
			if (!sb.toString().isEmpty()) {
				sb.append(" " + lastname);
			} else {
				sb.append(lastname);
			}
		}
		String temp = sb.toString().trim();
		
		// Clutch here: On manual mode, the device returns "MANUALLY_ENTERED" as a name
		if (temp.equalsIgnoreCase(MANUALLY_ENTERED)) {
			temp = "";
		}
		return temp;
	}

	/**
	 * EncryptedPin contained the pinBlock + the KSN.
	 * 
	 * @return String
	 */
	public String getEncryptedPin() {
		if (debitCard) {
			if (encryptedPIN == null || ksn == null) {
				// TODO problems ....
				return null;
			}
			return encryptedPIN + ksn;
		} else {
			return "";
		}
	}

	/**
	 * Debit card info.
	 * 
	 * @param pinBlock String
	 */
	public final void setPinBlock(final String pinBlock) {
		this.encryptedPIN = pinBlock;
	}
	/** 
	 * 
	 * @param ksn String
	 */
	public final void setKsn(final String ksn) {
		this.ksn = ksn;
	}
	/**
	 * 
	 * @return boolean
	 */
	public final boolean validateDebitCardInfo() {
		if (encryptedPIN == null || ksn == null) {
			return false;
		} else {
			return true;
		}
	}
	/**
	 * 
	 * @return boolean
	 */
	public final boolean isDebit() {
		return debitCard;
	}
	/**
	 * 
	 * @param isDebit boolean
	 */
	public final void setDebit(final boolean isDebit) {
		this.debitCard = isDebit;
	}
	/**
	 * 
	 * @param name String
	 * @return String
	 */
	public static String validateCardHolderName(final String name) {

		if (name.length() > 60) {
			return CARD_HOLDER_NAME_EXCEED_SIZE;
		}

		final Pattern pattern = Pattern.compile(REGEX);
		final Matcher matcher = pattern.matcher(name);
		if (matcher.matches()) {
			return null;
		} else {
			return CARD_HOLDER_NAME_INVALID_CHARACTERS;
		}
	}
	/**
	 * 
	 * @return int 
	 */
	public final int getEntryModeStatusID() {
		return entryModeStatusID;
	}
	/**
	 * 
	 * @param entryModeStatusID int
	 */
	public final void setEntryModeStatusID(int entryModeStatusID) {
		this.entryModeStatusID = entryModeStatusID;
	}

	/**
	 * 
	 * @return String
	 */
    public final String getCcExpirationDate() {
        return ccExpirationDate;
    }
    /**
     * 
     * @param val String
     * @throws BadDataException
     * @throws CardExpiredException
     */
    public final void setCcExpirationDate(final String val) throws BadDataException, CardExpiredException {
        // The MSR returns the Expiration Date, with the format YYMM.
        // We need to convert it to MMYY
        if (val == null || val.isEmpty()) {
            throw new BadDataException("The Expiration Date is Missing in this card");
        }
        final String year = val.substring(0, 2);
        final String month = val.substring(2, 4);
        ccExpirationDate = month + year;
        compareDate(year, month);
    }
    /**
     * 
     * @param year String
     * @param month String
     * @throws CardExpiredException when card is expire.
     */
    private void compareDate(final String year, final String month) throws CardExpiredException {
        final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Date expDate = null;
        try {
            expDate = dateFormat.parse("20" + year + month + "01" + "30");
        } catch (ParseException e) {
            LOGGER.warn("This card has expired");
        }

        final Date today = new Date(System.currentTimeMillis());
        if (today.after(expDate)) {
            LOGGER.warn("This card has expired");
        }
    }
    /**
     * 
     * @return String
     */
	public final String getCreditCardNumber() {
		return creditCardNumber;
	}
	/**
	 * 
	 * @param val String
	 * @throws BadDataException
	 */
    public final void setCreditCardNumber(final String val) throws BadDataException {
        if (val == null || val.isEmpty()) {
            throw new BadDataException("The Credit Card Number is Missing in this card");
        }
        creditCardNumber = val;
    }
    /**
     * 
     * @return String
     */
    public final String getFirstName() {
        return firstName;
    }
    /**
     * 
     * @param name String
     */
    public final void setFirstName(final String name) {
        this.firstName = name;
    }
    /**
     * 
     * @return String
     */
    public final String getLastname() {
        return lastname;
    }
    /**
     * 
     * @param lastname String
     */
    public final void setLastname(final String lastname) {
        this.lastname = lastname;
    }
    /**
     * 
     * @return String
     */
    public final String getMiddlename() {
        return middlename;
    }
    /**
     * 
     * @param middlename String
     */
    public final void setMiddlename(final String middlename) {
        this.middlename = middlename;
    }
    /**
     * @return string 
     */
    public final String getTitle() {
        return title;
    }
    /**
     * 
     * @param title String
     */
    public final void setTitle(final String title) {
        this.title = title;
    }
    
    /**
     * returns the mechanism of how the encrypted track been composed 1 : track
     * 1 only 2 : track 2 only 3 : manual entry 4 : track 1 and track 2.
     * @throws BadDataException 
     */
    public final void validateTracks() throws BadDataException {
        final String[] encryptedTrackInfo = track3Data.split(":");
        switch (Integer.parseInt(encryptedTrackInfo[1])) {
        case 1:
            if (track2Data.isEmpty()) {
                throw new BadDataException("Track 2 is Missing or damage in this card");
            }
            break;
        case 2:
            if (track1Data.isEmpty()) {
                // Debit cards seem to have the track 1 unavailable .... so this should be a warning ...
                LOGGER.warn("Track 1 is Missing or damage in this card, is this a DEBIT card?");
            }
            break;
        case 3:
            break;
        case 4:
            if (track2Data.isEmpty() || track1Data.isEmpty()) {
                throw new BadDataException("Track 2 is Missing or damage in this card");
            }
            break;
        default:
            break;
        }
    }
    /**
     * 
     * @return String
     */
    public final String getFirmwareVersion() {
        return firmwareVersion;
    }
    /**
     * 
     * @param val String
     */
    public final void setFirmwareVersion(final String val) {
        this.firmwareVersion = val;
    }

    @Override
	public final String toString() {
        return "{" 
                + "\"EntryModeStatusID\" : \"" + entryModeStatusID + "\","
                + "\"EntryModeTypeID\" : \"" + entryModeTypeID.ordinal() + "\","
                + "\"CustomerName\" : \"" + getCustomerName() + "\","
                + "\"Track1Data\" : \"" + track1Data + "\","
                + "\"Track2Data\" : \"" + track2Data + "\","
                + "\"Track3Data\" : \"" + track3Data + "\","
                + "\"SerialNumber\" : \"" + serialNumber + "\","
                + "\"FirmwareVersion\" : \"" + firmwareVersion + "\","
                + "\"DebitCard\" : \"" + debitCard + "\","
                + "\"EncryptedTracks\" : \"" + encryptedTracks + "\","
                + "\"EncryptedPIN\" : \"" + getEncryptedPin() + "\","
                + "\"CreditCardNumber\" : \"" + creditCardNumber + "\","
                + "\"CCExpirationDate\" : \"" + ccExpirationDate + "\""
                + "}";
    }



}
